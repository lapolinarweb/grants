Resources:
    sslSecurityGroupIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            GroupId: {"Fn::GetAtt" : ["AWSEBSecurityGroup", "GroupId"]}
            IpProtocol: tcp
            ToPort: 443
            FromPort: 443
            CidrIp: 0.0.0.0/0

files:
  /etc/httpd/conf.d/000_http_redirect_custom.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      <VirtualHost *:80>
        ServerName grants.maharlikacoin.com
        ServerAlias *.maharlikacoin.com
        DocumentRoot "/var/www/html/public"

        RewriteEngine on

        # redirect http to https
        RewriteCond %{HTTP:X-Forwarded-Proto} =http [OR]
        RewriteCond %{HTTP:X-Forwarded-Proto} =""
        RewriteCond %{HTTPS} !=on
        RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
      </VirtualHost>

  /etc/httpd/conf.d/ssl.pre:
    mode: "000644"
    owner: root
    group: root
    content: |
      LoadModule ssl_module modules/mod_ssl.so
      Listen 443
      <IfModule mod_ssl.c>
        <VirtualHost *:443>
          <Directory /var/app/current/public>
            Order deny,allow
            Allow from all
          </Directory>

          RewriteEngine on
          SSLCertificateFile "/etc/letsencrypt/live/LETSENCRYPT_DOMAIN/fullchain.pem"
          SSLCertificateKeyFile "/etc/letsencrypt/live/LETSENCRYPT_DOMAIN/privkey.pem"
          SSLSessionTickets Off
          Include /etc/letsencrypt/options-ssl-apache.conf

          Header always set Strict-Transport-Security "max-age=63072000; includeSubdomains; preload"
          Header always set X-Frame-Options DENY
          Header always set X-Content-Type-Options nosniff

          ProxyPass / http://localhost:80/ retry=0
          ProxyPassReverse / http://localhost:80/
          ProxyPreserveHost on
          RequestHeader set X-Forwarded-Proto "https" early
          # If you have pages that may take awhile to
          # respond, add a ProxyTimeout:
          # ProxyTimeout seconds
        </VirtualHost>
      </IfModule>

  /tmp/renew_cert_cron:
    mode: "000777"
    owner: root
    group: root
    content: |
      # renew Lets encrypt cert with certbot command
      0 1,13 * * * /usr/local/bin/certbot-auto renew

packages:
    yum:
        epel-release: []
        mod24_ssl : []

# Steps here
# 1. Install certbot
# 2. Get cert (stop apache before grabbing)
# 3. Link certs where Apache can grab
# 4. Get the Apache config in place
# 5. Move certbot-auto into tmp folder

container_commands:
  210_installcertbot:
    command: "wget https://dl.eff.org/certbot-auto;chmod a+x certbot-auto"
  210_replace_placeholders:
    command: |
      source /opt/elasticbeanstalk/support/envvars
      SED_EXPRESSION='s/LETSENCRYPT_DOMAIN/'$LETSENCRYPT_DOMAIN'/g'
      echo $SED_EXPRESSION
      sed -i -e $SED_EXPRESSION /etc/httpd/conf.d/ssl.pre
      sed -i -e $SED_EXPRESSION /etc/httpd/conf.d/000_http_redirect_custom.conf
  220_getcert:
    command: sudo ./certbot-auto certonly --non-interactive --email ${LETSENCRYPT_EMAIL} --agree-tos --debug --apache -d "$LETSENCRYPT_DOMAIN" --keep-until-expiring
  230_link:
    command: "sudo ln -sf /etc/letsencrypt/live/$LETSENCRYPT_DOMAIN /etc/letsencrypt/live/ebcert"
  240_config:
    command: "sudo mv /etc/httpd/conf.d/ssl.pre /etc/httpd/conf.d/ssl.conf"
  250_mv_certbot_to_temp_for_cron_renew:
    command: "sudo mv ./certbot-auto /usr/local/bin"
  260_create_cert_crontab:
    command: "sudo crontab /tmp/renew_cert_cron"
  70_delete_cronjob_file:
    command: "sudo  rm /tmp/renew_cert_cron"
